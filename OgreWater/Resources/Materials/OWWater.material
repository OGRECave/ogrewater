/*
Copyright (c) 2011 Anders Lingfors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

vertex_program OgreWater/Water/Vertex hlsl glsl glsles glslang
{
    source OWWaterVP.glsl
    target vs_3_0
}
fragment_program OgreWater/Water/Fragment hlsl glsl glsles glslang
{
    source OWWaterFP.glsl
    target ps_3_0
}

material OgreWater/Water/Above
{
    technique
    {
        pass
        {
			vertex_program_ref OgreWater/Water/Vertex
			{
				param_named_auto world world_matrix
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto cameraPositionOS camera_position_object_space
				param_named_auto lightDirection light_direction_object_space 0
			}

			fragment_program_ref OgreWater/Water/Fragment
			{
				param_named_auto cameraPosition camera_position
				param_named_auto viewportSize viewport_size
				param_named_auto time time 0.005
				param_named_auto waterFogColor custom 0
				param_named_auto materialVariables custom 1

                param_named reflectionTexture int 0
                param_named refractionTexture int 1
                param_named reflectionDepthTexture int 2
                param_named refractionDepthTexture int 3
                param_named normalTexture int 4
			}

            texture_unit
            {
                texture ReflectionTexture
				tex_address_mode mirror
            }

            texture_unit
            {
                texture RefractionTexture
				tex_address_mode mirror
            }

            texture_unit
            {
                texture ReflectionDepthTexture
				tex_address_mode mirror
            }

            texture_unit
            {
                texture RefractionDepthTexture
				tex_address_mode mirror
            }

			texture_unit
			{
				texture WaterNormal1.tga
			}
        }
    }
}

material OgreWater/Water/Below
{
    technique
    {
        pass
        {
			cull_hardware anticlockwise

			vertex_program_ref OgreWater/Water/Vertex
			{
				param_named_auto world world_matrix
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto cameraPositionOS camera_position_object_space
				param_named_auto lightDirection light_direction_object_space 0
			}

			fragment_program_ref OgreWater/Water/Fragment
			{
				param_named_auto cameraPosition camera_position
				param_named_auto viewportSize viewport_size
				param_named_auto time time 0.005
				param_named_auto waterFogColor custom 0
				param_named_auto materialVariables custom 1

                param_named reflectionTexture int 0
                param_named refractionTexture int 1
                param_named reflectionDepthTexture int 2
                param_named refractionDepthTexture int 3
                param_named normalTexture int 4
			}

            texture_unit
            {
                texture ReflectionTexture
				tex_address_mode mirror
            }

            texture_unit
            {
                texture RefractionTexture
				tex_address_mode mirror
            }

            texture_unit
            {
                texture ReflectionDepthTexture
            }

            texture_unit
            {
                texture RefractionDepthTexture
            }

			texture_unit
			{
				texture WaterNormal1.tga
			}
        }
    }
}